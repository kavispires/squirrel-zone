@function _get-unit($value) {
  /* get-unit
  * Determines unit with 3px reference, every value is double its predecessor
  * Formula: 2^(x-1) x 3
  * Examples:
  * 1: 4px
  * 2: 8px
  * 3: 16px
  * 4: 32px
  * 5: 64px
  */

  $raised: 1;

  @if $value == 0 {
    @return 0;
  }

  @if $value < 0 {
    $raised: -1;
  }

  $multiplier: abs($value);

  @if $multiplier > 1 {
    @for $i from 1 through $multiplier - 1 {
      $raised: $raised * 2;
    }
  }

  @return $raised * 3px;
}

@function get-unit($value1, $value2: null, $value3: null, $value4: null) {
  $result: _get-unit($value1);

  @if $value2 {
    $result: $result + ' ' + _get-unit($value2);
  }

  @if $value3 {
    $result: $result + ' ' + _get-unit($value3);
  }

  @if $value4 {
    $result: $result + ' ' + _get-unit($value4);
  }

  @return unquote($result);
}

/* get-color
 * Determines color and available shades
 * Each color has 9 levels and 5 is the default mid color one
*/
@function get-color($color-name, $shade: 5) {
  $colors: (
    primary: #222222,
    negative: #ffffff,
    blue: #598ffd,
    gray: #6f7273,
    green: #49d156,
    orange: #fea245,
    pink: #fb9cf0,
    purple: #9e8ef0,
    red: #d14949,
    teal: #34ac9e,
    yellow: #ffd700,
    white: #ffffff,
    black: #222222,
    test: #6b7273,
  );

  $shade-levels: (
    1: 50%,
    2: 40%,
    3: 30%,
    4: 15%,
    5: 0,
    6: -15%,
    7: -30%,
    8: -40%,
    9: -50%,
  );

  $color: null;

  // Determine color
  @if map-has-key($colors, $color-name) {
    $color: map-get($colors, $color-name);
  } @else {
    @error "Invalid color name: `#{$color-name}`.";
  }

  $shade-level: null;

  // Determine shade
  @if map-has-key($shade-levels, $shade) {
    $shade-level: map-get($shade-levels, $shade);
  } @else {
    @error "Invalid shade value: `#{$shade}`.";
  }

  @return adjust-color($color, $lightness: $shade-level);
}
